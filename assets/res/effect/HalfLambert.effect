// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: HalfLambert-vs
      frag: HalfLambert-fs:frag
      properties: &props
        mainTexture:          { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        tilingOffset:         { value: [1, 1, 0, 0] }
        mainColor:            { value: [0.95, 0.95, 0.95, 1.0], target: albedoColor, linear: true, editor: { displayName: Albedo, type: color } }
        rimLightColor: { value: [1.0, 1.0, 1.0, 0.5], target: rimColor, editor: { parent: USE_RIM_LIGHT,displayName: Rim Light Color, type: color } }
        diffuseWrap:          { value: 0.5,target: bpParams.z, editor: { slide: true, range: [0.5, 1.0], step: 0.001 } }
        shininess:            { value: 0.5,target: bpParams.x, editor: { parent: USE_IBL, slide: true, range: [0., 1.0], step: 0.001 } }
        roughness:            { value: 0.2,target: bpParams.y, editor: { parent: USE_IBL, slide: true, range: [0.0, 1.0], step: 0.01 } }
        albedoScale:          { value: [1., 1., 1.], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:       { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        emissive:       { value: [0.0, 0.0, 0.0, 1.0], linear: true, editor: { type: color } }
        emissiveMap:    { value: grey   }
        normalMap:      { value: normal }
        normalStrength: { value: 1.0, target: bpParams.w, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0, 5.0], step: 0.001 } }
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 1
      rasterizerState:
        cullMode: front
      properties:
  - name: transparent
    passes:
    - vert: HalfLambert-vs
      frag: HalfLambert-fs:frag
      embeddedMacros: { CC_FORCE_FORWARD_SHADING: true }
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState: &b1
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - *shadow-caster
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedoColor;
    vec4 albedoScaleAndCutoff;
    vec4 rimColor;
    vec4 emissive;
    vec4 bpParams;
  };
}%

CCProgram HalfLambert-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  #if CC_RECEIVE_SHADOW
    out mediump vec2 v_shadowBias;
  #endif

  #if USE_NORMAL_MAP
    out mediump vec4 v_tangent;
  #endif

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif
  #if USE_RIM_LIGHT
    out vec3 v_view_normal;
  #endif  


  out vec3 v_position;
  out vec3 v_normal;
  out vec2 v_uv;

  void main () {

    StandardVertInput In;
    CCVertInput(In);
    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);
    vec4 pos = matWorld *  In.position;
    #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
      CC_TRANSFER_SHADOW(pos);
    #endif
    v_position = pos.xyz;
    #if CC_RECEIVE_SHADOW
      v_shadowBias = CCGetShadowBias();
    #endif
    CC_TRANSFER_FOG(pos);

    vec4 position = cc_matView * pos;

    vec4 normal = vec4(In.normal,0.0);

    #if USE_RIM_LIGHT
        v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);
    #endif 

    v_normal = normalize((matWorldIT * normal).xyz);

    #if USE_NORMAL_MAP
      v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
      v_tangent.w = In.tangent.w;
    #endif

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif
    gl_Position = cc_matProj * position;
  }
}%

CCProgram HalfLambert-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <common/data/unpack>
  #include <shared-ubos>
  #include <legacy/fog-fs>

  #if CC_RECEIVE_SHADOW
    #include <legacy/shadow-map-fs>
    in mediump vec2 v_shadowBias;
  #endif

  in vec3 v_position;
  in vec2 v_uv;
  in vec3 v_normal;

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_EMISSIVE_MAP
    uniform sampler2D emissiveMap;
  #endif

  #if USE_NORMAL_MAP
    in mediump vec4 v_tangent;
    uniform sampler2D normalMap;
  #endif

  #if USE_RIM_LIGHT
    in vec3 v_view_normal;
  #endif  

  #if USE_IBL
    #include <builtin/uniforms/cc-environment>
    #include <common/texture/texture-lod>
    #include <common/data/unpack>
  #endif  


  void HalfLambert(inout vec4 diffuseColor,in vec3 normal){
    vec3 N = normalize(normal);
    vec3 L = normalize(cc_mainLitDir.xyz * -1.0);
    float NL = max(dot(N, L), 0.0);
    vec3 diffuse = pow(NL * bpParams.z + (1.-bpParams.z),2.0) * (diffuseColor.rgb * cc_mainLitColor.xyz);
    vec3 position;
    HIGHP_VALUE_FROM_STRUCT_DEFINED(position, v_position);
    float shadowCtrl = 1.0;
    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
      #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_CASCADED
        shadowCtrl = CCCSMFactorBase(position, N, v_shadowBias);
      #endif
      #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
        shadowCtrl = CCShadowFactorBase(CC_SHADOW_POSITION, N, v_shadowBias);
      #endif
    #endif
    diffuse *= shadowCtrl;

    //IBL
    #if CC_USE_IBL && USE_IBL
      vec3 cameraPosition = cc_cameraPos.xyz / cc_cameraPos.w;
      vec3 V = normalize(cameraPosition- position);
      vec3 env = vec3(1.);
      vec3 R = normalize(reflect(-V, N));
      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);
      vec4 envmap = fragTextureLod(cc_environment, rotationDir, bpParams.y * (cc_ambientGround.w - 1.0));
      #if CC_USE_IBL == IBL_RGBE
        env = unpackRGBE(envmap);
      #else
        env = SRGBToLinear(envmap.rgb);
      #endif
      diffuse = mix(env, diffuse, bpParams.x);
    #endif
    vec3 ambient = cc_ambientGround.rgb * diffuseColor.rgb * cc_ambientSky.w;
    diffuseColor.rgb = ambient + diffuse;
  }

  vec4 frag () {
    //Blinn-Phong from GPT4.0&&iwae
    vec4 color = albedoColor;
    color.rgb *= albedoScaleAndCutoff.xyz;
    #if USE_VERTEX_COLOR
      color *= v_color;
    #endif
    //Albedo
    #if USE_ALBEDO_MAP
      color *= texture(albedoMap, v_uv);
      color.rgb = SRGBToLinear(color.rgb);
    #endif

    vec3 normal = v_normal;
    //Normal
    #if USE_NORMAL_MAP
      vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);
      vec3 bitangent = cross(normal, v_tangent.xyz) * sign(v_tangent.w); // note the cross order
      normal =
        (nmmp.x * bpParams.w) * normalize(v_tangent.xyz) +
        (nmmp.y * bpParams.w) * normalize(bitangent) +
        nmmp.z * normalize(normal);
    #endif

    //HalfLambert
    HalfLambert(color,normal);

    //Emmissive
    vec3 emissiveCol = emissive.rgb;

    #if USE_EMISSIVE_MAP
      emissiveCol *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);
    #endif
    color.rgb +=emissiveCol;

    // Alpha Test
    #if USE_ALPHA_TEST
      if (color.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    //RimLight
    #if USE_RIM_LIGHT
        vec4 rim;
        rim = rimColor;     
        float fRim = (1.0 - dot(v_view_normal,vec3(0,0,1.0))) * rim.w;
        color.rgb = mix(color.rgb,rim.rgb,fRim);
    #endif  

    //Fog
    CC_APPLY_FOG(color);

    //Output
    return CCFragOutput(color);
  }
}%


CCProgram shadow-caster-vs %{
  precision mediump float;
  #include <legacy/input-standard>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <builtin/uniforms/cc-shadow>

  out vec4 v_worldPos;
  out highp vec2 v_clip_depth;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * In.position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;
    v_clip_depth = clipPos.zw;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision mediump float;
  #include <shared-ubos>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  in vec4 v_worldPos;
  in highp vec2 v_clip_depth;

  vec4 frag () {
    highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;
    // spot use linear
    #if CC_SHADOWMAP_USE_LINEAR_DEPTH
      if (IS_SPOT_LIGHT(cc_shadowLPNNInfo.x)) {
        clipDepth = CCGetLinearDepth(v_worldPos.xyz);
      }
    #endif
    #if CC_SHADOWMAP_FORMAT == SHADOWMAP_FORMAT_RGBA8
      return packDepthToRGBA(clipDepth);
    #else
      return vec4(clipDepth, 1.0, 1.0, 1.0);
    #endif
  }
}%






